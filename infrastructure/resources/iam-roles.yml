# infrastructure/resources/iam-roles.yml - FIXED VERSION
Resources:
  # Execution Role para todas las Lambdas
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:service}-lambda-execution-role-${self:custom.stage}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        # DynamoDB Access - USAR WILDCARDS
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: 
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-appointments-${self:custom.stage}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-appointments-${self:custom.stage}/index/*"
        
        # SNS Access - USAR WILDCARDS
        - PolicyName: SNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:service}-appointments-${self:custom.stage}"
        
        # SQS Access - USAR WILDCARDS
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:SendMessage
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${self:service}-appointments-pe-${self:custom.stage}"
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${self:service}-appointments-cl-${self:custom.stage}"
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${self:service}-confirmations-${self:custom.stage}"
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${self:service}-emails-${self:custom.stage}"
        
        # EventBridge Access - USAR WILDCARDS
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${self:service}-${self:custom.stage}"
        
        # VPC Access for RDS
        - PolicyName: VPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                  - ec2:DetachNetworkInterface
                Resource: "*"
        
        # SES Access (for email function)
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendTemplatedEmail
                  - ses:SendRawEmail
                Resource: "*"
        
        # CloudWatch Logs
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

Outputs:
  LambdaExecutionRoleArn:
    Description: "Lambda Execution Role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: ${self:service}-${self:custom.stage}-lambda-role-arn
